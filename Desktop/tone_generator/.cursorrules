# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information

## JUCE Cross-Platform Development Lessons

- **Android API Level Compatibility**: When building for Android, ensure the target API level is compatible with the NDK version. NDK 25.2.9519653 supports up to API level 33, not 34. Use `-DANDROID_PLATFORM=android-33` and `-DCMAKE_ANDROID_API=33` for this NDK version.
- **Android Build Script Fix**: Use `sysctl -n hw.ncpu` instead of `nproc` on macOS for determining CPU cores in build scripts.
- **JUCE Graphics Module Android Issues**: The JUCE graphics module uses Android font APIs introduced in API 29+. Always target API 29+ when using JUCE graphics features on Android.
- **CMake vs Projucer for iOS**: For iOS projects, Projucer GUI is more reliable than CMake for generating Xcode projects. CMake iOS builds often fail due to code signing and provisioning profile requirements.
- **AudioAppComponent Architecture**: Always call `setAudioChannels(0, 2)` in the MainComponent constructor to initialize audio device with stereo output. This is crucial for cross-platform audio applications.
- **JUCE Module Dependencies**: When using CMake, ensure all required JUCE modules are linked via `target_link_libraries`. The `juce_add_gui_app` macro handles basic linking, but additional modules like `juce_audio_devices` must be explicitly linked.

# Scratchpad

## Current Task: Fix Cross-Platform JUCE Project Issues

**Task Description**: Fix the identified issues in the cross-platform JUCE Tone Generator project:
1. Android build API level compatibility issue
2. iOS project setup using Projucer
3. Verify all platforms are working correctly

**Progress**:
[X] Fix Android build API level from 19 to 33 (compatible with NDK 25.2.9519653)
[X] Update Android build script to use correct API level and CPU core detection
[X] Test Android build - SUCCESS: Generated libToneGenerator.so (97MB ARM shared library)
[X] Verify macOS build still working - SUCCESS: Tone Generator.app running
[ ] Create iOS project using Projucer (STOPPED - user requested)
[ ] Test iOS build and deployment (STOPPED - user requested)
[ ] Update verification report with final status (STOPPED - user requested)

**Current Status**: 
- ✅ **macOS**: Fully working (Tone Generator.app)
- ✅ **Android**: Fixed and working (libToneGenerator.so built successfully)
- ⚠️ **iOS**: Needs Projucer project creation

**Next Steps**:
1. Create .jucer project file for iOS using Projucer
2. Generate Xcode project from .jucer file
3. Test iOS build in Xcode
4. Update final verification report

**Key Learnings**:
- Android NDK version determines maximum supported API level
- JUCE graphics module requires API 29+ for font features
- Projucer is more reliable than CMake for iOS project generation
